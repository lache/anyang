<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// this file is auto-generated by tt
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;

namespace Server.Message
<#
var indent = 0;
Action<string> writeCode    = code => WriteLine(new string(' ', indent * 4) + code);
Action         startBracket = () => { writeCode("{"); ++indent; };
Action         endBracket   = () => { --indent; writeCode("}"); };

startBracket();
#>
    public interface IMessage
    {
        void WriteTo(BinaryWriter writer);
        void ReadFrom(BinaryReader reader);
    }

<#
var msgXmlFile = this.Host.ResolvePath(Path.Combine("..", "resources", "data", "msg.xml"));
var msgXml = XElement.Load(msgXmlFile);
var postfix = ToCamelCase(msgXml.Attribute("postfix").Value);

var typeIdMap = new Dictionary<int, string>();
var groupIndex = 0;
foreach (var groupNode in msgXml.Elements("group"))
{
    ++groupIndex;

    var groupName = ToCamelCase(groupNode.Attribute("name").Value);
    var typeIndex = 0;
    foreach (var msgNode in groupNode.Elements("msg"))
    {
        var typeId = groupIndex * 1000 + typeIndex;
        ++typeIndex;

        var isInternal = (bool?) msgNode.Attribute("internal");
        if (isInternal.HasValue && isInternal.Value)
            continue;

        var messageName = msgNode.Attribute("name").Value;
        var messageClassName = ToCamelCase(messageName) + postfix;
        typeIdMap.Add(typeId, messageClassName);

        writeCode(string.Format("public class {0} : IMessage", messageClassName));
        startBracket();
        writeCode(string.Format("public const int TypeId = {0};", typeId));

        var members = new List<Tuple<MemberType, string, string>>();
        foreach (var fieldNode in msgNode.Elements("field"))
        {
            var fieldType = fieldNode.Attribute("type").Value;
            var fieldName = ToCamelCase(fieldNode.Attribute("name").Value);
            if (fieldType.Equals("bin", StringComparison.OrdinalIgnoreCase))
                fieldType = "byte[]";

            writeCode(string.Format("public {0} {1} {{ get; set; }}", fieldType, fieldName));
            members.Add(Tuple.Create(MemberType.Primitive, fieldName, fieldType));
        }

        foreach (var refNode in msgNode.Elements("ref"))
        {
            var refName = ToCamelCase(refNode.Attribute("msg").Value);
            var onceRef = (bool?)refNode.Attribute("once");
            if (onceRef.HasValue && onceRef.Value)
            {
                var fieldType = refName + postfix;
                var fieldName = refName;
                writeCode(string.Format("public {0} {1} {{ get; set; }}", fieldType, fieldName));
                members.Add(Tuple.Create(MemberType.OnceRef, fieldName, fieldType));
            }
            else
            {
                var listTypeName = string.Format("List<{0}{1}>", refName, postfix);
                var listMemberName = string.Format("{0}List", refName);
                writeCode(string.Format("public {0} {1} {{ get; private set; }}", listTypeName, listMemberName));
                members.Add(Tuple.Create(MemberType.ListRef, listMemberName, listTypeName));
            }
        }

        if (members.Count(e => e.Item1 != MemberType.Primitive) > 0)
        {
            writeCode("");
            writeCode(string.Format("public {0}()", messageClassName));
            startBracket();
            foreach (var pair in members.Where(e => e.Item1 != MemberType.Primitive))
            {
                writeCode(string.Format("{0} = new {1}();", pair.Item2, pair.Item3));
            }
            endBracket();
        }

        writeCode("");
        writeCode("public void WriteTo(BinaryWriter writer)");
        startBracket();
        writeCode("writer.Write(TypeId);");
        foreach (var member in members)
        {
            if (member.Item1 == MemberType.Primitive && member.Item3 == "byte[]")
            {
                writeCode(string.Format("writer.Write({0}.Length);", member.Item2));
                writeCode(string.Format("writer.Write({0});", member.Item2));
            }
            else if (member.Item1 == MemberType.Primitive && member.Item3 == "string")
            {
                writeCode(string.Format("if (string.IsNullOrEmpty({0})) writer.Write(0);", member.Item2));
                writeCode("else");
                startBracket();
                    writeCode(string.Format("var bytes = Encoding.UTF8.GetBytes({0});", member.Item2));
                    writeCode("writer.Write(bytes.Length);");
                    writeCode("writer.Write(bytes);");
                endBracket();
            }
            else if (member.Item1 == MemberType.Primitive)
            {
                writeCode(string.Format("writer.Write({0});", member.Item2));
            }
            else if (member.Item1 == MemberType.OnceRef)
            {
                writeCode(string.Format("{0}.WriteTo(writer);", member.Item2));
            }
            else if (member.Item1 == MemberType.ListRef)
            {
                writeCode(string.Format("writer.Write({0}.Count);", member.Item2));
                writeCode(string.Format("foreach (var each in {0}) each.WriteTo(writer);", member.Item2));
            }
        }
        endBracket();

        writeCode("");
        writeCode("public void ReadFrom(BinaryReader reader)");
        startBracket();
        foreach (var member in members)
        {
            if (member.Item1 == MemberType.Primitive && member.Item3 == "byte[]")
            {
                startBracket();
                writeCode("var length = reader.ReadInt32();");
                writeCode(string.Format("{0} = reader.ReadBytes(length);", member.Item2));
                endBracket();
            }
            else if (member.Item1 == MemberType.Primitive && member.Item3 == "string")
            {
                startBracket();
                writeCode("var length = reader.ReadInt32();");
                writeCode("var bytes = reader.ReadBytes(length);");
                writeCode(string.Format("{0} = Encoding.UTF8.GetString(bytes);", member.Item2));
                endBracket();
            }
            else if (member.Item1 == MemberType.Primitive)
            {
                switch (member.Item3)
                {
                case "bool": writeCode(string.Format("{0} = reader.ReadBoolean();", member.Item2)); break;
                case "short": writeCode(string.Format("{0} = reader.ReadInt16();", member.Item2)); break;
                case "ushort": writeCode(string.Format("{0} = reader.ReadUInt16();", member.Item2)); break;
                case "int": writeCode(string.Format("{0} = reader.ReadInt32();", member.Item2)); break;
                case "uint": writeCode(string.Format("{0} = reader.ReadUInt32();", member.Item2)); break;
                case "long": writeCode(string.Format("{0} = reader.ReadInt64();", member.Item2)); break;
                case "ulong": writeCode(string.Format("{0} = reader.ReadUInt64();", member.Item2)); break;
                case "float": writeCode(string.Format("{0} = reader.ReadSingle();", member.Item2)); break;
                case "double": writeCode(string.Format("{0} = reader.ReadDouble();", member.Item2)); break;
                }
            }
            else if (member.Item1 == MemberType.OnceRef)
            {
                writeCode("reader.ReadInt32(); // throw type-id");
                writeCode(string.Format("{0}.ReadFrom(reader);", member.Item2));
            }
            else if (member.Item1 == MemberType.ListRef)
            {
                var childTypeName = member.Item2.Substring(0, member.Item2.Length - 4 /* List */) + postfix;
                startBracket();
                writeCode("var count = reader.ReadInt32();");
                writeCode(string.Format("{0}.AddRange(Enumerable.Range(0, count).Select(_ => new {1}()));", member.Item2, childTypeName));
                writeCode(string.Format("foreach (var each in {0})", member.Item2));
                startBracket();
                    writeCode("reader.ReadInt32(); // throw type-id");
                    writeCode("each.ReadFrom(reader);");
                endBracket();
                endBracket();
            }
        }
        endBracket();

        endBracket();
        writeCode("");
    }
}

writeCode("public static class MessageFactory");
startBracket();
    writeCode("public static IMessage Create(int typeId)");
    startBracket();
        writeCode("switch (typeId)");
        startBracket();
        foreach (var pair in typeIdMap)
        {
            writeCode(string.Format("case {0}: return new {1}();", pair.Key, pair.Value));
        }
        endBracket();
        writeCode("return null;");
    endBracket();
endBracket();

endBracket();
#>

<#+
enum MemberType
{
    Primitive, OnceRef, ListRef
}

string ToCamelCase(string source, bool upperFirst = true)
{
    if (string.IsNullOrWhiteSpace(source))
        return source;

    var makeUpper = upperFirst;
    var builder = new StringBuilder();
    foreach (var ch in source.Replace('-', '_'))
    {
        if (ch == '_') makeUpper = true;
        else
        {
            builder.Append(makeUpper ? char.ToUpper(ch) : ch);
            makeUpper = false;
        }
    }
    return builder.ToString();
}
#>